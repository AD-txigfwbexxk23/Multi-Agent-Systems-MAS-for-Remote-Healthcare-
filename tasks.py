# Zehaan Walji
# Dec 11th, 2024
# Agent Task File

# Imports
from crewai import Task
from crewai.agent import Agent
import typing

# Creating class
class MedicalTasks:
    
    past_queries = []
    
    
    
    # Classifying issue:
    def classifySymptoms(self, agent: Agent, query: str, pastQueries: list[dict[str, typing.Any]] | typing.Any):

        if not self.past_queries:
            self.past_queries = pastQueries
        return Task(
            description=(f""" 
    Analyze the user's input to classify the medical emergency based on described symptoms.
    Should match symptoms to a predefined database of medical conditions or guidelines.
    Output a concise summary of the likely emergency type and severity.
    The query is {query}
    The past queries are {self.past_queries}
            """),
            expected_output="A classification of the symptom",
            agent=agent,
        )
        
        
        
        
        
        
        
        
    def recommendProtocol(self, agent: Agent, context: list[Task], pastQueries: list[dict[str, typing.Any]] | typing.Any): #past_queries=None):
        # Use past queries to refine protocol recommendations
        if not self.past_queries:
            self.past_queries = pastQueries
        return Task(
            description=(f"""
    Retrieve and adapt specific mwedical protocols based on the classified emergency type and return a concise, actionable plan to solve the issue. 
    The agent should use trusted medical resources (e.g., Red Cross, WHO, or internal databases).
    Additionally, they should adapt the protocol to user-specific contexts (e.g., age, known medical conditions).
    Always ask follow-up questions to gain better insight into the user's issues.
    If the user has previous queries, those should be taken into account to gain a holistic idea of what could be wrong. 
    The past queries are {self.past_queries}
            """),
            expected_output="A list of steps to solve the issue",
            agent=agent,
            context=context
        )








    # Verifying results:
    def verifyRecommendation(self, agent, context):
        return Task(
            description=(f"""
Cross-check the medical advice generated by other agents to ensure accuracy and consistency. 
Ensure they are using various independent sources (e.g., PubMed, Ollama, ISO Guidelines, other AI systems).
Identify and flag any discrepancies or potential errors.
        """),
            expected_output="Verify the results and ensure that what is being said aligns with ISO guidelines and other trusted sources",
            agent=agent,
            context=context
        )







    # Checking user medical knowledge:
    def checkUserMedicalKnowledge(self, agent, query):
        return Task(
            description=(f"""
Analyze the language of the user to determine both their estimated age and their level of medical knowledge. 
For example, if the user is using complex medical terms, they are likely to be a medical professional.
If the user is using simple terms, they are likely to be a layman. The query is {query}
        """),
            expected_output="An estimated age and proficiency level of the user, with a brief explanation as to why.",
            agent=agent,
        )






    # Calling EMS (if needed):
    def escelateRisk(self, agent, context):
        return Task(
            description=(f"""               
Assess the risk level of the current situation and determine if escalation to emergency services is required. 
If escalation is deemed necessary, then the agent should use tools to send emergency notifications. 
        """),
            expected_output="Send a message based on the user status, only if needed",
            agent=agent,
            context=context,
        )






    def userExplination(self, agent=None, context=None, past_queries=None):
        # Add past queries to user explanation
        if past_queries:
            if context is None:
                context = []
            context.append({'past_queries': past_queries})
        return Task(
            description=(f"""
    Provide a clear and empathetic explanation of the verified medical advice. 
    Additionally, the agent should explain the system's verification process to build user trust.
    Always ask follow-up questions to gain better insight into the user's issues. However, do not wait for an answer to continue.
    If the user has previous queries, those should be taken into account to gain a holistic idea of what could be wrong.
            """),
            expected_output="Provide an easy explanation of how to solve the issue",
            agent=agent,
            context=context,
        )
