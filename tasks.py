#Zehaan Walji
#Dec 11th, 2024
#Agent Task File



#Imports
from crewai import Task


#Creating class
class MedicalTasks:



    #Classifying issue:
    def classifySymptoms(self, agent, query):
        return Task(
            description=(f""" 
Analyze the user's input to classify the medical emergency based on described symptoms.
Should match symptoms to a predefined database of medical conditions or guidelines.
Output a concise summary of the likely emergency type and severity.
The query is {query}
            """
            ),
            expected_output="A classification of the symptom",
            agent=agent,
        )





    #Reccomending a solution: 
    def recommendProtocol(self, agent, context):
        return Task(
            description=(f"""
Retrieve and adapt specific medical protocols based on the classified emergency type and return a concise, actionable plan to solve the issue. 
The agent shuld use trusted medical resources (e.g., Red Cross, WHO, or internal databases).
Additionally, they should adapt the protocol to user-specific contexts (e.g., age, known medical conditions).
Always ask follow up questions to gain better insight into the users issues.
If the user has previous queries then those should be taken into to gain a holisitc idea of what could be wrong. 
        """
            ),
            
            expected_output="A list of steps to solve the issue",
            agent=agent,
            context= context
        )





    #Verifying results:
    def verifyRecommendation(self, agent, context):
        return Task(
            description=(f"""
Cross-check the medical advice generated by other agents to ensure accuracy and consistency. 
Ensure they are using various independent sources (e.g., PubMed, Ollama, ISO Guidlines other AI systems).
Identify and flag any discrepancies or potential errors.
        """
            ),
            
            expected_output="Verify the results and ensure that what is being said aligns with ISO guidlines and other trusted sources",
            agent=agent,
            context= context
        )
    

    #Verifying results:
    def checkUserMedicalKnowledge(self, agent, query):
        return Task(
            description=(f"""
Analyze the language of the user to determine both their estimated age and their lvel of medical knowledge. 
For example, if the user is using complex medical terms then they are likely to be a medical professional.
If the user is using simple terms then they are likely to be a layman.
        """
            ),
            
            expected_output="an estimated age and proficiency level of the user, with a breif explination as to why.",
            agent=agent,
        )



    #Calling EMS (if needed)
    def escelateRisk(self, agent, context):
        return Task(
            description=(f"""               
Assess the risk level of the current situation and determine if escalation to emergency services is required. 
If escalation is deemed necessary then the agent should us tool to send emergency notifcation. 
        """
            ),
            
            expected_output="Send a message based on the user status, only if needed",
            agent=agent,
            context= context,
        )
    



    #Explaining steps:
    def userExplination(self, agent, context):
        return Task(
            description=(f"""
Provide a clear and empathetic explanation of the verified medical advice. 
Additionally, the agent should, explain the system's verification process to build user trust.
Always ask follow up questions to gain better insight into the users issues.
If the user has previous queries then those should be taken into to gain a holisitc idea of what could be wrong.
        """
            ),
            
            expected_output="Provide an easy explination of how to solve the issue",
            agent=agent,
            context= context,
        )
    
